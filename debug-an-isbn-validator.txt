** start of main.py **

def validate_isbn(isbn, length):
    
    if len(isbn) != length:
        print(f'ISBN-{length} code should be {length} digits long.')
        return
        
    main_digits = isbn[0:length]
    
    given_check_digit = isbn[-1]

    main_digits_list = [int(digit) for digit in main_digits[:-1]]


    # Calculate the check digit from other digits

    if length == 10:
        expected_check_digit = calculate_check_digit_10(main_digits_list)

    else:
        expected_check_digit = calculate_check_digit_13(main_digits_list)


    # Check if the given check digit matches with the calculated check digit

    print(f"Given Check Digit: {given_check_digit}\n")

    print(f"Expected Check Digit: {expected_check_digit}\n")

    if given_check_digit == expected_check_digit:
        print('Valid ISBN Code.')
    else:
        print('Invalid ISBN Code.')


def calculate_check_digit_10(main_digits_list):
    # Note: You don't have to fully understand the logic in this function.

    digits_sum = 0

    # Multiply each of the first 9 digits by its corresponding weight (10 to 2) and sum up the results

    for index, digit in enumerate(main_digits_list):

        digits_sum += digit * (10 - index)

    # Find the remainder of dividing the sum by 11, then subtract it from 11

    result = 11 - digits_sum % 11

    # The calculation result can range from 1 to 11.
    # If the result is 11, use 0.
    # If the result is 10, use upper case X.
    # Use the value as it is for other numbers.

    if result == 11:
        expected_check_digit = '0'
    elif result == 10:
        expected_check_digit = 'X'
    else:
        expected_check_digit = str(result)

    return expected_check_digit



def calculate_check_digit_13(main_digits_list):
    # Note: You don't have to fully understand the logic in this function.

    digits_sum = 0

    # Multiply each of the first 12 digits by 1 and 3 alternately (starting with 1), and sum up the results

    for index, digit in enumerate(main_digits_list):
        if index % 2 == 0:
            digits_sum += digit * 1
        else:
            digits_sum += digit * 3

    # Find the remainder of dividing the sum by 10, then subtract it from 10

    result = 10 - digits_sum % 10

    # The calculation result can range from 1 to 10.
    # If the result is 10, use 0.
    # Use the value as it is for other numbers.

    if result == 10:
        expected_check_digit = '0'
    else:
        expected_check_digit = str(result)
        
    return expected_check_digit


def main():

    user_input = input('Enter ISBN and length: ')

    if "," not in user_input:
        print('Enter comma-separated values.')
        return

    else:
    
        length = user_input[-2:].replace(",", "")
        
        print(f"Length is: {length}\n")

        isbn = user_input[0:-2].replace(",", "")
    
        print(f"ISBN is: {isbn}\n")

        for i, item in enumerate(isbn):
            if i == len(isbn)-1:
                if not item.isdigit():
                    if item != "X":
                        print('Invalid character was found.')
                        return
            else:
                if not item.isdigit():
                    print('Invalid character was found.')
                    return
        
        #for 13 length:
        if len(isbn) > 10:
            for item in isbn:
                if not item.isdigit():
                    print('Invalid character was found.')
                    return
                    #maybe "return" is not necessary here, because all my tests are OK; but I forgot to add "return" as I did before in the previous for loop.

        if length.isdigit():
            if int(length) == 10 or int(length) == 13:
                validate_isbn(isbn, int(length))
            else:
                print('Length should be 10 or 13.')
        else:
            print('Length must be a number.')

#as you can see, no "return"s were necessary here (in the if-else length)

#main()
#to pass all tests, FCC asked to comment out the main function; but for debugging, you need to see what's happening in the project calling main() (and print some steps to see the response on the console)

** end of main.py **

